<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fortune Tiger</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #2c3e50; /* Azul escuro */
            color: #ecf0f1; /* Quase branco */
            display: flex;
            flex-direction: column;
            align-items: center;
            margin: 0;
            padding: 20px;
        }

        h1 {
            color: #f1c40f; /* Amarelo ouro */
            margin-bottom: 20px;
        }

        #balance {
            font-size: 1.6em;
            font-weight: bold;
            color: #2ecc71; /* Verde esmeralda */
            margin-bottom: 25px;
            background-color: #34495e;
            padding: 10px 20px;
            border-radius: 10px;
            box-shadow: 0 0 15px rgba(46, 204, 113, 0.5); /* Sombra verde */
        }

        #slot-machine {
            display: flex;
            gap: 15px;
            margin-bottom: 30px;
            background-color: #4a69bd; /* Azul mais claro para a m√°quina */
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.4);
            border: 3px solid #f1c40f; /* Borda amarela */
        }

        .reel {
            width: 100px;
            height: 120px;
            background-color: #3b5998; /* Azul mais escuro para o rolo */
            border-radius: 8px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 4em; /* Tamanho grande para os s√≠mbolos */
            overflow: hidden; /* Garante que apenas um s√≠mbolo seja vis√≠vel */
            position: relative; /* Para a anima√ß√£o */
            border: 2px solid #ecf0f1;
            box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.5);
        }

        .symbol {
            position: absolute;
            animation: spinReel 0.5s ease-out forwards; /* Anima√ß√£o ao girar */
        }
        
        .spin-animation {
            animation: spinReel 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;
        }

        @keyframes spinReel {
            0% { transform: translateY(-100%); opacity: 0; }
            100% { transform: translateY(0); opacity: 1; }
        }

        #controls {
            display: flex;
            flex-direction: column;
            gap: 15px;
            align-items: center;
            margin-bottom: 20px;
        }

        #controls div {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        #betAmountInput {
            width: 80px;
            padding: 8px;
            border-radius: 5px;
            border: 1px solid #555;
            background-color: #333;
            color: #fff;
            text-align: center;
            font-size: 1.1em;
        }

        button {
            padding: 12px 25px;
            font-size: 1.2em;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: background-color 0.2s, transform 0.1s;
            font-weight: bold;
        }

        #spinButton {
            background-color: #e74c3c; /* Vermelho vibrante */
            color: white;
            box-shadow: 0 4px 10px rgba(231, 76, 60, 0.5);
        }

        #spinButton:hover {
            background-color: #c0392b;
        }

        #spinButton:active {
            transform: translateY(2px);
            box-shadow: 0 2px 5px rgba(231, 76, 60, 0.5);
        }

        #spinButton:disabled {
            background-color: #95a5a6; /* Cinza */
            cursor: not-allowed;
            box-shadow: none;
        }

        #winningsDisplay {
            font-size: 1.4em;
            font-weight: bold;
            color: #f1c40f; /* Amarelo */
            margin-top: 15px;
            background-color: #34495e;
            padding: 10px 20px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(241, 196, 15, 0.5);
            min-height: 1.4em; /* Para manter o layout mesmo sem texto */
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .back-button {
            margin-top: 30px;
            padding: 10px 20px;
            background-color: #3498db; /* Azul */
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1em;
            text-decoration: none; /* Para o link <a> */
            transition: background-color 0.2s;
        }

        .back-button:hover {
            background-color: #2980b9;
        }

        /* Confetti animation */
        #confetti-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            overflow: hidden;
            z-index: 9999;
        }

        .confetti {
            position: absolute;
            width: 10px;
            height: 10px;
            background-color: #f1c40f; /* Amarelo */
            border-radius: 50%;
            opacity: 0;
            animation: fall 3s ease-out forwards;
        }

        @keyframes fall {
            0% {
                transform: translateY(-100vh) rotate(0deg);
                opacity: 1;
            }
            100% {
                transform: translateY(100vh) rotate(720deg);
                opacity: 0;
            }
        }
    </style>
</head>
<body>
    <h1>Fortune Tiger</h1>

    <div id="balance">Saldo: <span id="currentBalance">0.00</span> BRL</div>

    <div id="slot-machine">
        <div class="reel" id="reel1"><span class="symbol"></span></div>
        <div class="reel" id="reel2"><span class="symbol"></span></div>
        <div class="reel" id="reel3"><span class="symbol"></span></div>
    </div>

    <div id="controls">
        <div>
            <label for="betAmountInput">Aposta (BRL): </label>
            <input type="number" id="betAmountInput" min="1" value="1" step="0.50">
        </div>
        <button id="spinButton" onclick="spinReels()">Girar</button>
    </div>

    <div id="winningsDisplay"></div>

    <a href="index.html" class="back-button">Voltar para a P√°gina Principal</a>

    <div id="confetti-container"></div>

    <script>
        const reels = [
            document.getElementById('reel1').querySelector('.symbol'),
            document.getElementById('reel2').querySelector('.symbol'),
            document.getElementById('reel3').querySelector('.symbol')
        ];
        const currentBalanceDisplay = document.getElementById('currentBalance');
        const betAmountInput = document.getElementById('betAmountInput');
        const spinButton = document.getElementById('spinButton');
        const winningsDisplay = document.getElementById('winningsDisplay');
        const confettiContainer = document.getElementById('confetti-container');

        let playerBalance = 0; // Ser√° carregado do localStorage
        let isSpinning = false;

        // S√≠mbolos do jogo (usando emojis para simplicidade)
        // Mais comuns para menos comuns (melhores pagamentos)
        const symbols = ['üçä', 'üçã', 'üçá', 'üîî', 'üí∞', 'üëë', 'üêÖ']; 
        // Voc√™ pode ajustar a probabilidade de cada s√≠mbolo aparecendo.
        // Por exemplo, para tornar alguns s√≠mbolos mais raros:
        const weightedSymbols = [
            'üçä', 'üçä', 'üçä', 'üçä', 'üçä',
            'üçã', 'üçã', 'üçã', 'üçã',
            'üçá', 'üçá', 'üçá',
            'üîî', 'üîî',
            'üí∞',
            'üëë',
            'üêÖ' // O tigre √© o mais raro e o de maior valor
        ];

        // Mapeamento de pagamentos: s√≠mbolo : valor do multiplicador da aposta
        const payouts = {
            'üçä': 2,
            'üçã': 3,
            'üçá': 5,
            'üîî': 8,
            'üí∞': 10,
            'üëë': 20,
            'üêÖ': 50 // O tigre √© o Wild e paga mais se alinhar 3
        };

        // Sound effects
        const spinSound = new Audio('slot_spin.mp3'); // Voc√™ precisar√° deste arquivo
        const winSound = new Audio('slot_win.mp3');   // Voc√™ precisar√° deste arquivo
        const noWinSound = new Audio('slot_no_win.mp3'); // Som para quando n√£o ganha (opcional)

        // Fun√ß√£o para salvar o saldo no localStorage
        function saveBalance() {
            localStorage.setItem('minesPlayerBalance', playerBalance.toFixed(2)); // Usamos a mesma chave
        }

        // Fun√ß√£o para carregar o saldo do localStorage
        function loadBalance() {
            const savedBalance = localStorage.getItem('minesPlayerBalance');
            if (savedBalance !== null) {
                playerBalance = parseFloat(savedBalance);
            } else {
                playerBalance = 20.00; // Saldo inicial se n√£o houver nada salvo
            }
        }

        function updateBalanceDisplay() {
            currentBalanceDisplay.textContent = playerBalance.toFixed(2);
            saveBalance(); // Salva o saldo sempre que o display √© atualizado
        }

        function getRandomSymbol() {
            // Escolhe um s√≠mbolo aleatoriamente da lista ponderada
            return weightedSymbols[Math.floor(Math.random() * weightedSymbols.length)];
        }

        async function spinReels() {
            if (isSpinning) return;

            const betAmount = parseFloat(betAmountInput.value);

            if (isNaN(betAmount) || betAmount <= 0) {
                alert("Por favor, insira um valor de aposta v√°lido.");
                return;
            }
            if (betAmount > playerBalance) {
                alert(`Saldo insuficiente! Voc√™ tem R$ ${playerBalance.toFixed(2)}.`);
                return;
            }

            isSpinning = true;
            spinButton.disabled = true;
            betAmountInput.disabled = true;
            winningsDisplay.textContent = ""; // Limpa a mensagem de ganho anterior
            clearConfetti(); // Limpa confetes anteriores

            playerBalance -= betAmount; // Deduz a aposta
            updateBalanceDisplay();

            spinSound.play(); // Toca o som de giro

            const finalSymbols = [];
            for (let i = 0; i < 3; i++) {
                // Adiciona uma pequena aleatoriedade no tempo para parecer mais natural
                const delay = i * 100; 
                setTimeout(() => {
                    reels[i].classList.add('spin-animation'); // Adiciona classe para animar
                    const symbol = getRandomSymbol();
                    reels[i].textContent = symbol;
                    finalSymbols[i] = symbol; // Armazena o s√≠mbolo final
                }, delay);
            }

            // Aguarda a anima√ß√£o terminar para todos os rolos (0.5s + 200ms de delay extra)
            setTimeout(() => {
                reels.forEach(reel => reel.classList.remove('spin-animation')); // Remove a anima√ß√£o
                checkWin(finalSymbols, betAmount);
                isSpinning = false;
                spinButton.disabled = false;
                betAmountInput.disabled = false;
            }, 700); // 500ms (anima√ß√£o) + 200ms (buffer)
        }

        function checkWin(resultSymbols, betAmount) {
            let winAmount = 0;
            let message = "Que pena, n√£o foi dessa vez!";
            let isWinningSpin = false;

            // Verifica se todos os s√≠mbolos s√£o iguais (linha central)
            if (resultSymbols[0] === resultSymbols[1] && resultSymbols[1] === resultSymbols[2]) {
                const winningSymbol = resultSymbols[0];
                winAmount = betAmount * payouts[winningSymbol];
                message = `üéâ Vit√≥ria! ${winningSymbol}${winningSymbol}${winningSymbol} - Ganhou R$ ${winAmount.toFixed(2)}!`;
                isWinningSpin = true;
            }
            // Verifica o recurso Fortune Tiger (se os 3 rolos forem o s√≠mbolo do Tigre)
            // Ou se 3 s√≠mbolos quaisquer preencherem a tela (para o multiplicador x10)
            if (resultSymbols[0] === resultSymbols[1] && resultSymbols[1] === resultSymbols[2]) {
                 // Se todos os s√≠mbolos s√£o iguais, aplica o multiplicador x10 conforme o Fortune Tiger
                 winAmount = winAmount * 10;
                 message = `üî• MEGA VIT√ìRIA! ${resultSymbols[0]}${resultSymbols[0]}${resultSymbols[0]} - Multiplicador 10x! Ganhou R$ ${winAmount.toFixed(2)}!`;
                 isWinningSpin = true;
            }


            if (isWinningSpin) {
                playerBalance += winAmount;
                winSound.play();
                launchConfetti(); // Lan√ßa confetes na vit√≥ria
            } else {
                noWinSound.play(); // Toca som de n√£o vit√≥ria
            }

            winningsDisplay.textContent = message;
            updateBalanceDisplay(); // Salva o saldo atualizado
        }

        function launchConfetti() {
            const colors = ['#f1c40f', '#e67e22', '#2ecc71', '#3498db', '#9b59b6', '#e74c3c']; // Cores vibrantes
            for (let i = 0; i < 50; i++) { // Lan√ßa 50 confetes
                const confetti = document.createElement('div');
                confetti.classList.add('confetti');
                confetti.style.left = `${Math.random() * 100}vw`;
                confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
                confetti.style.animationDuration = `${Math.random() * 2 + 3}s`; // Dura√ß√£o entre 3 e 5 segundos
                confetti.style.animationDelay = `${Math.random() * 0.5}s`; // Pequeno delay
                confettiContainer.appendChild(confetti);

                // Remover confetes ap√≥s a anima√ß√£o
                confetti.addEventListener('animationend', () => {
                    confetti.remove();
                });
            }
        }

        function clearConfetti() {
            confettiContainer.innerHTML = '';
        }


        // Initial setup
        loadBalance(); // Carrega o saldo ao iniciar
        updateBalanceDisplay(); // Exibe o saldo carregado
        
        // Garante que o som de giro esteja pronto para tocar rapidamente
        spinSound.load(); 
        winSound.load();
        noWinSound.load();
    </script>
</body>
</html>